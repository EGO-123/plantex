#version 400

layout(vertices = 1) out;

in vec3 vPosition[];
in vec3 material_color[];
in vec3 surfaceNormal[];
in vec3 vOffset[];

out vec3 offset[];

uniform vec3 camera_pos;

const float TESS_LEVEL_INNER = 5.0;
const float TESS_LEVEL_OUTER = 5.0;

struct OutputPatch {
    vec3 WorldPos_B030;
    vec3 WorldPos_B021;
    vec3 WorldPos_B012;
    vec3 WorldPos_B003;
    vec3 WorldPos_B102;
    vec3 WorldPos_B201;
    vec3 WorldPos_B300;
    vec3 WorldPos_B210;
    vec3 WorldPos_B120;
    vec3 WorldPos_B111;
    vec3 Normal[3];
    vec3 Color;
};

patch out OutputPatch oPatch;

vec3 ProjectToPlane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal)
{
    vec3 v = Point - PlanePoint;
    float Len = dot(v, normalize(PlaneNormal));
    vec3 d = Len * normalize(PlaneNormal);
    vec3 res = (Point-d);
    vec3 add = (res - PlanePoint);
    return (res + 2 * add);
}

void CalcPositions()
{
    // Edges are names according to the opposing vertex
    vec3 EdgeB300 = oPatch.WorldPos_B003 - oPatch.WorldPos_B030;
    vec3 EdgeB030 = oPatch.WorldPos_B300 - oPatch.WorldPos_B003;
    vec3 EdgeB003 = oPatch.WorldPos_B030 - oPatch.WorldPos_B300;

    // Generate two midpoints on each edge
    vec3 tmp_B021 = oPatch.WorldPos_B030 + EdgeB300 / 3.0;
    vec3 tmp_B012 = oPatch.WorldPos_B030 + EdgeB300 * 2.0 / 3.0;
    vec3 tmp_B102 = oPatch.WorldPos_B003 + EdgeB030 / 3.0;
    vec3 tmp_B201 = oPatch.WorldPos_B003 + EdgeB030 * 2.0 / 3.0;
    vec3 tmp_B210 = oPatch.WorldPos_B300 + EdgeB003 / 3.0;
    vec3 tmp_B120 = oPatch.WorldPos_B300 + EdgeB003 * 2.0 / 3.0;

    // adding height_information
    oPatch.WorldPos_B021 = ProjectToPlane(tmp_B021, oPatch.WorldPos_B030,
                                          oPatch.Normal[0]);

    oPatch.WorldPos_B012 = ProjectToPlane(tmp_B012, oPatch.WorldPos_B003,
                                         oPatch.Normal[1]);

    oPatch.WorldPos_B102 = ProjectToPlane(tmp_B102, oPatch.WorldPos_B003,
                                         oPatch.Normal[1]);

    oPatch.WorldPos_B201 = ProjectToPlane(tmp_B201, oPatch.WorldPos_B300,
                                         oPatch.Normal[2]);

    oPatch.WorldPos_B210 = ProjectToPlane(tmp_B210, oPatch.WorldPos_B300,
                                         oPatch.Normal[2]);

    oPatch.WorldPos_B120 = ProjectToPlane(tmp_B120, oPatch.WorldPos_B030,
                                         oPatch.Normal[0]);

    // Handle the center
    vec3 Center = (oPatch.WorldPos_B003 + oPatch.WorldPos_B030 + oPatch.WorldPos_B300) / 3.0;
    vec3 tmp = (oPatch.WorldPos_B021 + oPatch.WorldPos_B012 + oPatch.WorldPos_B102 +
                          oPatch.WorldPos_B201 + oPatch.WorldPos_B210 + oPatch.WorldPos_B120) / 6.0;

    oPatch.WorldPos_B111 = tmp + (tmp - Center) / 2.0;

}

void main() {
    // setting Normals
    for (int i = 0; i < 3; i++) {
        oPatch.Normal[i] = surfaceNormal[i];
    }

    offset[gl_InvocationID] = vOffset[gl_InvocationID];

    // The original vertices stay the same
    oPatch.WorldPos_B030 = vPosition[0];
    oPatch.WorldPos_B003 = vPosition[1];
    oPatch.WorldPos_B300 = vPosition[2];

    // handle tesselation level on distance
    int len = int(length(camera_pos - offset[0]) / 3);
    float inner = TESS_LEVEL_INNER;
    float outer = TESS_LEVEL_OUTER;

    if (len > TESS_LEVEL_INNER - 1 || len > TESS_LEVEL_INNER - 1){
        inner = 1.0;
        outer = 1.0;


        // set to dummy values (not setting them causes glitches on some GPUs)
        oPatch.WorldPos_B021 = vec3(0);
        oPatch.WorldPos_B012 = vec3(0);
        oPatch.WorldPos_B102 = vec3(0);
        oPatch.WorldPos_B201 = vec3(0);
        oPatch.WorldPos_B210 = vec3(0);
        oPatch.WorldPos_B120 = vec3(0);
        oPatch.WorldPos_B111 = vec3(0);

    } else {
        inner = inner - len;
        outer = outer - len;
        CalcPositions();
    }

    oPatch.Color = material_color[0];

    gl_TessLevelInner[0] = inner;
    gl_TessLevelOuter[0] = outer;
    gl_TessLevelOuter[1] = outer;
    gl_TessLevelOuter[2] = outer;
}
